#!/usr/bin/perl

BEGIN {
  unshift(@INC, "/afs/andrew.cmu.edu/usr16/jpincar/cert/WWW-Mechanize-1.30/lib/");
}

$version = "v3.0";

use WWW::Mechanize;
my $mech = WWW::Mechanize -> new();
$mech -> cookie_jar(HTTP::Cookies->new);

undef %done;

$user = '';
$pass = '';

doMechLogin();

$url = 'https://www.securecoding.cert.org/confluence/display/cplusplus/01.+Preprocessor+(PRE)';
#$url = 'https://www.securecoding.cert.org/confluence/display/cplusplus/02.+Declarations+and+Initialization+(DCL)';
#$url = 'https://www.securecoding.cert.org/confluence/display/cplusplus/03.+Expressions+(EXP)';
#$url = 'https://www.securecoding.cert.org/confluence/display/cplusplus/04.+Integers+(INT)';
#$url = 'https://www.securecoding.cert.org/confluence/display/cplusplus/05.+Floating+Point+Arithmetic+(FLP)';
#$url = 'https://www.securecoding.cert.org/confluence/display/cplusplus/06.+Arrays+and+the+STL+(ARR)';
#$url = 'https://www.securecoding.cert.org/confluence/display/cplusplus/07.+Characters+and+Strings+(STR)';
#$url = 'https://www.securecoding.cert.org/confluence/display/cplusplus/08.+Memory+Management+(MEM)';
#$url = 'https://www.securecoding.cert.org/confluence/display/cplusplus/09.+Input+Output+(FIO)';
#$url = 'https://www.securecoding.cert.org/confluence/display/cplusplus/10.+Environment+(ENV)';
#$url = 'https://www.securecoding.cert.org/confluence/display/cplusplus/11.+Signals+(SIG)';
#$url = 'https://www.securecoding.cert.org/confluence/display/cplusplus/12.+Exceptions+and+Error+Handling+(ERR)';
#$url = 'https://www.securecoding.cert.org/confluence/display/cplusplus/13.+Object+Orientation+(OBJ)';
#$url = 'https://www.securecoding.cert.org/confluence/display/cplusplus/49.+Miscellaneous+(MSC)';

$url .= "?showChildren=true";
$url =~ /\((.*?)\)/;
$section = $1;

die("Could not detect section.\n") if($section eq "");
print("Spidering through ($section) section.\n");

$mech -> get($url);
my @links = $mech -> links;
my $maxDepth = 2;
my $depth = 0;

while($depth < $maxDepth) {
  @links_new = ();
  
  foreach my $link (@links) {
    next if($link == NULL);

    my $href = $link -> url;

    if($done{$href} == 1 || $href =~ /#/ || $href !~ /$section|editpage/) {next;}
    else {$done{$href} = 1;}

    if($href =~ /confluence\/pages\/editpage.action/) {
      $mech -> get($href);
      next unless($mech -> success());

      $mech -> content =~ /<input\s+type="text"\s+name="title"\s+size="43"\s+value="(.*?)"/;
      $title = $1;
      print("Editing: $title\n");
      
      $content = $mech -> content; 
      $content =~ /name="content".*?>(.*?)<\/textarea>/s;
      $text = $1;

      doShaunChanges();
      fixHtmlCodes();
      doEditorChanges();

      $content =~ s/\|\s*([a-zA-Z0-9]{5}-\S+?)\s*\|.*?([[:alpha:]]+).*?\|.*?([[:alpha:]]+).*?\.*?([[:alpha:]]+).*?\|.*?\|.*?\|/checkrisk($1, $2, $3, $4)/ge;

      if($title =~ /^([a-zA-Z0-9]{5})-/) {
	$name = $1;
	print("\tThis is CPP rule: $name\n");
	savecode();
	doRelatedLink();
      }
      
      $comment = "Edited by sciSpider CPP $version (jp)";

      $mech -> form_name('editpageform'); 
      $mech -> field('content', $content);
      $mech -> field('versionComment', $comment);
      $mech -> click('confirm');
      print("\tEdit complete.\n");
      
      next;  
    }
    
    next if ($href !~ /confluence\/display\/cplusplus\//);
  
    $mech -> get($href.'?showChildren=true');
    next unless($mech -> success());
    @links_new = (@links_new, $mech -> links);
  }
  
  @links = @links_new;
  $depth++;
}

die("\nSpidering complete.\n\n");

######################################
## Code ends here. Only subs below. ##
######################################

sub checkrisk {
  my $rule = shift;
  my $severity = shift;
  my $likelihood = shift;
  my $cost = shift;

  if ($severity eq "high") {
    $sev = 3;
  } elsif ($severity eq "medium") {
    $sev = 2;
  } elsif ($severity eq "low") {
    $sev = 1;
  } else {
    $sev = 0;
  }

  if ($likelihood eq "likely") {
    $lik = 3;
  } elsif ($likelihood eq "probable") {
    $lik = 2;
  } elsif ($likelihood eq "unlikely") {
    $lik = 1;
  } else {
    $lik = 0;
  }

  if ($cost eq "high") {
    $cos = 1;
  } elsif ($cost eq "medium") {
    $cos = 2;
  } elsif ($cost eq "low") {
    $cos = 3;
  } else {
    $cos = 0;
  }

  $total = $sev * $lik * $cos;

  if ($total > 11) {
    $end = "{color:red}{*}P".$total."{*}{color} | {color:red}{*}L1{*}{color}"; 
  } elsif ($total > 5) {
    $end = "{color:#cc9900}{*}P".$total."{*}{color} | {color:#cc9900}{*}L2{*}{color}"; 
  } elsif ($total > 0) {
    $end = "{color:green}{*}P".$total."{*}{color} | {color:green}{*}L3{*}{color}"; 
  } else {
    $end = "{color:blue}{*}P???{*}{color} | {color:blue}{*}L???{*}{color}";
  }

  if($title =~ /^([a-zA-Z0-9]{5})-/) {
    $rule = $1."-CPP";
  }

  return "| $rule | $severity | $likelihood | $cost | $end |";
}

sub savecode {
  my $ncce = '';

  while ($content =~ /\{code\:bgColor\s*=\s*\#FFCCCC.*?\}(.*?)\{code\}/gsi) {
    $ncce .= "\n/* Begin {code} */\n".$1."\n/* End {code} */\n";
  }

  open(NCCE, ">code/".$name."_ncce.cpp");
  print NCCE $ncce;
  close(NCCE);

  my $cs = '';

  while ($content =~ /\{code\:bgColor\s*=\s*\#CCCCFF.*?\}(.*?)\{code\}/gsi) {
    $cs .= "\n/* Begin {code} */\n".$1."\n/* End {code} */\n";
  }
	  
  open(CS, ">code/".$name."_cs.cpp");
  print CS $cs;
  close(CS);
}

sub fixHtmlCodes {
  $content =~ s/&amp;/&/g;
  $content =~ s/&quot;/"/g;
  $content =~ s/&lt;/</g;
  $content =~ s/&gt;/>/g;
  # $content =~ s/&nbsp;/ /g;
}

sub doEditorChanges {
  $content =~ s/non-compliant/noncompliant/g;
  $content =~ s/Non-Compliant/Noncompliant/g;
  $content =~ s/Non-compliant/Noncompliant/g;
  $content =~ s/NCCE/NCE/g;

  $content =~ s/int main\(\)/int main\(void\)/g;

  #      $content =~ s/NULL-termination/null-termination/g;
  #      $content =~ s/NULL-terminated/null-terminated/g;
  $content =~ s/The tool Compass Rose/Compass\/ROSE/g;
  $content =~ s/Compass \/ Rose/Compass\/ROSE/g;
  $content =~ s/\\\[\[ISO\/IEC 9899-1999\|AA\. C References\#ISO\/IEC 9899-1999\]\\\]/\\\[\[ISO\/IEC 9899:1999\|AA\. C References\#ISO\/IEC 9899-1999\]\\\]/g;
  $content =~ s/compilant/compliant/g;
  $content =~ s/Compilant/Compliant/g;
  $content =~ s/Unix/UNIX/g;
  $content =~ s/denial of service attack/denial-of-service attack/g;
  $content =~ s/denial of service condition/denial-of-service attack/g;
  $content =~ s/14882-2003\|/14882\:2003\|/g;
  $content =~ s/24731-1-2007\|/24731-1\:2007\|/g;
  $content =~ s/in order to/to/g;
  $content =~ s/in order for/for/g;
  $content =~ s/Therefore/Consequently/g;
  $content =~ s/therefore/consequently/g;
  $content =~ s/Thus/As a result/g;
  $content =~ s/thus/as a result/g;
  $content =~ s/utilized/used/g;
  #      $content =~ s/NULL pointer/null pointer/g;
  #      $content =~ s/NULL character/null character/g;
  $content =~ s/typecast/type cast/g;
  $content =~ s/typecasts/type casts/g;
  $content =~ s/illustrates/shows/g;
  $content =~ s/Posix/POSIX/g;
  $content =~ s/run-time/runtime/g;
  $content =~ s/Shell code/Shellcode/g;
  $content =~ s/shell code/shellcode/g;
  $content =~ s/is able to/can/g;
  $content =~ s/h2\. Automated/h3\. Automated/;

  # These might break things in code
  #      $content =~ s/filename/file name/g;
  #      $content =~ s/Filename/File name/g;
  $content =~ s/filesystem/file system/g;
  $content =~ s/Filesystem/File System/g;
  #      $content =~ s/pathname/path name/g;
  #      $content =~ s/Pathname/Path name/g;
}

sub doMechLogin {
  my $loginUrl = 'https://www.securecoding.cert.org/confluence/login.action';
  $mech -> get($loginUrl);
  $mech -> form_name('loginform');
  $mech -> field('os_username', $user);
  $mech -> field('os_password', $pass);
  $mech -> submit();
  die("Unable to login.\n") if (!$mech->success());
  die("\nSorry, your username and password are incorrect - please try again.\n\n") if ($mech->content() =~ /Sorry, your username and password are incorrect - please try again./);
}

sub doShaunChanges {
  open(FILE, ">content.txt") or die("Cannot open file for writing\n");
  print FILE ($mech -> title)."\n";
  print FILE $text;
  close(FILE);
  
  $content = `./a.out`;
  
  undef $success;
  open(SUCCESS, "success.txt") or die("Cannot open file for writing\n");
  $success = <SUCCESS>;
  close(SUCCESS);
  
  if($success !~ /\^_+\^/) {
    print("Warning: External changes did not succeed.\n");
    $content = $text;
  }
}

sub doRelatedLink {
  my $newtext = "Search for vulnerabilities resulting from the violation of this rule on the [CERT website|https://www.kb.cert.org/vulnotes/bymetric?searchview&query=FIELD+KEYWORDS+contains+$name"."-CPP].";

  if ($content =~ /Examples of vulnerabilities resulting from the.*?\]\.?/s) {
    $content =~ s/Examples of vulnerabilities resulting from the.*?\]\.?/h3. Related Vulnerabilities\n\n$newtext/s;
  } elsif ($content =~ /Search for .*? resulting from .*?\]\.?/s) {
    $content =~ s/Search for .*? resulting from .*?\]\.?/$newtext/s;
  } else {
    $content =~ s/(h2\. Risk Assessment.*?color.*?color.*?color.*?color.*?.*?\|)\s*/$1\n\nh3. Related Vulnerabilities\n\n$newtext\n\n/s;
  }
}
